package array;
/*
题目：
给定一个长度为 n 的整数数组 height 。有 n 条垂线，第 i 条线的两个端点是 (i, 0) 和 (i, height[i]) 。
找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。
返回容器可以储存的最大水量。
说明：你不能倾斜容器。
示例 1：
输入：[1,8,6,2,5,4,8,3,7]
输出：49
解释：图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。

示例 2：
输入：height = [1,1]
输出：1
 */
public class Solution2 {
    //自己的思路使用双重for循环+贪心
    public int maxArea(int[] height) {
        int maxArea = 0;
        int sumArea = 0;
        int smallRim = 0;
        //因为是双重for循环 虽然没有重复，但是做了很多无用功，导致超出时间限制，
        // 但是这个依旧能正确出结果，能做出来，但是不是最优解，违背了算法的高效性；
        for (int i = 0; i < height.length; i++) {
            for (int j = i + 1; j < (height.length); j++) {
                //本意是想使用贪心算法 来角逐出正确的结果
                smallRim = Math.min(height[i], height[j]);
                sumArea = smallRim * (j - i);
                maxArea = Math.max(maxArea, sumArea);
            }
        }
        return maxArea;

    }

    //别人的思路：使用双向指针
    public int maxArea2(int[] height) {
        int maxArea2 = 0; //用来存储最大的面子
        int left = 0;//指向数组的开头
        int right = height.length - 1;//指向数组的结尾
        while (left < right) {
            int area = (right - left) * Math.min(height[left], height[right]);
            maxArea2 = Math.max(maxArea2, area);//找出最大值
            if (height[left] < height[right]) {
                left += 1;
            } else {
                right -= 1;
            }
        }
        return maxArea2;
    }


    public static void main(String[] args) {
        int[] height = {8361,5302,8672,2400,5150,3527,9216,6713,2902,310,555,9176,311,9968,5705,3983,5690,9151,4820,8274,5462,7632,6889,6407,7638,2100,6100,819,5350,1614,2108,7498,8727,9960,5925,6462,3004,4675,8342,8734,4161,3842,9360,1514,1375,3915,9423,6382,4656,1838,1448,1418,480,9711,2648,9136,9636,7999,5025,7838,4628,6273,5070,1699,1344,4319,5732,9993,5564,8347,5504,9203,5262,3156,228,2474,6015,7441,6481,9945,1642,4849,1903,9494,1641,3856,5046,6481,5770,1322,3733,3248,2638,3941,8937,7347,4547,9117,3376,5758,2906,3972,700,5045,8474,2692,1742,6636,9995,9686,5880,8104,1758,4212,2025,3955,171,1050,4183,987,8105,8309,4393,7212,5700,3404,8317,6054,7457,9891,7914,9901,5339,704,7792,9043,7282,5535,7805,6516,5921,8745,6318,7471,1219,464,8891,9112,5855,1826,5986,5862,4657,9780,9096,1613,739,9079,7986,3005,4567,7642,1124,8619,574,2069,9946,9526,7001,4166,7169,3418,6455,8638,4490,6541,3044,6017,2149,721,5864,8669,4069,5284,890,22,2423,3744,6070,5045,3712,7769,6886,9018,9490,6459,6592,1182,6737,9999,5848,1716,3827,6359,2745,8280,6563,1287,1385,8771,9202,1011,9257,8015,4436,6897,8219,344,6616,8152,6221,547,3456,4151,9711,4738,1183,6320,3332,8302,9182,6434,1182,9937,5205,9998,2001,4918,6329,4837,5971,6182,3449,5971,5845,1553,2892,5330,7151,7301,1132,1771,2493,3389,5091,3320,5471,5494,8561,2415,3547,7396,8770,5076,5699,5695,1295,3944,839,7773,2766,7979,4686,2171,4392,640,9109,9126,6447,7965,9843,5472,1124,8619,574,2069,9946,9526,7001,4166,7169,3418,6455,8638,4490,6541,3044,6017,2149,721,5864,8669,4069,5284,890,22,2423,3744,6070,5045,3712,7769,6886,9018,9490,6459,6592,1182,6737,9999,5848,1716,3827,6359,2745,8280,6563,1287,1385,8771,9202,1011,9257,8015,4436,6897,8219,344,6616,8152,6221,547,3456,4151,9711,4738,1183,6320,3332,8302,9182,6434,1182,9937,5205,9998,2001,4918,6329,4837,5971,6182,3449,5971,5845,1553,2892,5330,7151,7301,1132,1771,2493,3389,5091,3320,5471,5494,8561,2415,3547,7396,8770,5076,5699,5695,1295,3944,839,7773,2766,7979,4686,2171,4392,640,9109,9126,6447,7965,9843,5472,1124,8619,574,2069,9946,9526,7001,4166,7169,3418,6455,8638,4490,6541,3044,6017,2149,721,5864,8669,4069,5284,890,22,2423,3744,6070,5045,3712,7769,6886,9018,9490,6459,6592,1182,6737,9999,5848,1716,3827,6359,2745,8280,6563,1287,1385,8771,9202,1011,9257,8015,4436,6897,8219,1124,8619,574,2069,9946,9526,7001,4166,7169,3418,6455,8638,4490,6541,3044,6017,2149,721,5864,8669,4069,5284,890,22,2423,3744,6070,5045,3712,7769,6886,9018,9490,6459,6592,1182,6737,9999,5848,1716,3827,6359,2745,8280,6563,1287,1385,8771,9202,1011,9257,8015,4436,6897,8219,344,6616,8152,6221,547,3456,4151,9711,4738,1183,6320,3332,8302,9182,6434,1182,9937,5205,9998,2001,4918,6329,4837,5971,6182,3449,5971,5845,1553,2892,5330,7151,7301,1132,1771,2493,3389,5091,3320,5471,5494,8561,2415,3547,7396,8770,5076,5699,5695,1295,3944,839,7773,2766,7979,4686,2171,4392,640,9109,9126,6447,7965,9843,5472,344,6616,8152,6221,547,3456,4151,9711,1124,8619,574,2069,9946,9526,7001,4166,7169,3418,6455,8638,4490,6541,3044,6017,2149,721,5864,8669,4069,5284,890,22,2423,3744,6070,5045,3712,7769,6886,9018,9490,6459,6592,1182,6737,9999,5848,1716,3827,6359,2745,8280,6563,1287,1385,8771,9202,1011,9257,8015,4436,6897,8219,344,6616,8152,6221,547,3456,4151,9711,4738,1183,6320,3332,8302,9182,6434,1182,9937,5205,9998,2001,4918,6329,4837,5971,6182,3449,5971,5845,1553,2892,5330,7151,7301,1132,1771,2493,3389,5091,3320,5471,5494,8561,2415,3547,7396,8770,5076,5699,5695,1295,3944,839,7773,2766,7979,4686,2171,4392,640,9109,9126,6447,7965,9843,5472,4738,1183,6320,3332,8302,9182,6434,1182,9937,5205,9998,2001,4918,6329,4837,5971,6182,3449,5971,5845,1553,2892,5330,7151,7301,1132,1771,2493,3389,5091,3320,5471,5494,8561,2415,3547,7396,8770,5076,5699,5695,1295,3944,839,7773,2766,7979,4686,2171,4392,640,9109,9126,6447,7965,9843,5472,1124,8619,574,2069,9946,9526,7001,4166,7169,3418,6455,8638,4490,6541,3044,6017,2149,721,5864,8669,4069,5284,890,22,2423,3744,6070,5045,3712,7769,6886,9018,9490,6459,6592,1182,6737,9999,5848,1716,3827,6359,2745,8280,6563,1287,1385,8771,9202,1011,9257,8015,4436,6897,8219,344,6616,8152,6221,547,3456,4151,9711,4738,1183,6320,3332,8302,9182,6434,1182,9937,5205,9998,2001,4918,6329,4837,5971,6182,3449,5971,5845,1553,2892,5330,7151,7301,1132,1771,2493,3389,5091,3320,5471,5494,8561,2415,3547,7396,8770,5076,5699,5695,1295,3944,839,7773,2766,7979,4686,2171,4392,640,9109,9126,6447,7965,9843,5472,7234,6962,897,9651,806,18,1963,3498,1116,5634,3962,7000,4113,6987,8670,8560,6895,1115,764,6944,468,853};
        Solution2 solution2 = new Solution2();
        long start = System.currentTimeMillis();
        System.out.println(solution2.maxArea(height));
        long end = System.currentTimeMillis();
        System.out.println(end - start);//13
        System.out.println("=============使用指针=========");
        long start01 = System.currentTimeMillis();
        System.out.println(solution2.maxArea2(height));
        long end01 = System.currentTimeMillis();
        System.out.println(end01 - start01);//0
        //这样大概就能看出 他们之间的区别了
    }
}
